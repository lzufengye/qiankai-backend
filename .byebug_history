c
Product.where(customer_id: params[:id].to_i)
params[:id]
c
@customers
c
curent_admin_user
role
role == 'admin'
c
exception.message
c
cc
c
Address.inspect
params
c
current_consumer.addresses
current_consumer
c
consumer
c
consumer = token && Consumer.find_by_authentication_token(token.to_s)
params[:token].presence
c
n
resource
c
 current_consumer.update authentication_token: nil
current_consumer.inspect
current_consumer
sign_in(resource_name, resource)
self.resource = warden.authenticate!(auth_options)
self.resource = warden.authenticate(auth_options)
sign_in(resource_name, resource)
 auth_options
 warden.authenticate
 warden.authenticate.insepct
resource
resource_name
self.resource = warden.authenticate(auth_options)
self.resource = warden.authenticate!(auth_options)
c
consumer_params
@consumer
c
@consumer.errors
@consumer.error_messages
@consumer.valid?
@consumer.valid!
@consumer.save!
@consumer
c
'apple'.pluralize
apple.pluralize
@result[0].class.name.downcase.pluralize
ActiveSupport::Inflector::Inflections.new.plural('', @result[0].class.name.downcase)
ActiveSupport::Inflector::Inflections.new.plural(@result[0].class.name.downcase)
ActiveSupport::Inflector::Inflections.new.plural
ActiveSupport::Inflector::Inflections.plural
ActiveSupport::Inflector::Inflections
plural
@result[0].class.name.downcase.plural
@result[0].class.name.downcase
@result[0].class.name
@result[0].class_name
@result[0].class
@result[0]
@result
@result += News.where("title like ?", "%#{params[:key_word]}%").to_a
@result = Article.where("title like ?", "%#{params[:key_word]}%").to_a
@result += News.where("title like ?", "%#{params[:key_word]}%").to_a
c
n
@result
c
@result
@result += News.where("title like ?", "%#{params[:key_word]}%").to_a
@result += Job.where("title like ?", "%#{params[:key_word]}%").to_a
@result += Activity.where("title like ?", "%#{params[:key_word]}%").to_a
@result = Article.where("title like ?", "%#{params[:key_word]}%").to_a
c
 Article.where("title like ?", params[:key_word]).to_a
@result
c
Article.where("text like ?", params[:key_word])
Article.where("title like ?", params[:key_word])
Article.all
Article
Article.where("title like ? OR text like ?", params[:key_word], params[:key_word])
Article.where("title like ? OR text like ?", params[:key_word])
params[:key_word]
params
prams
c
Category.find_by_name('about')
Category.find_by_name('关于')
@article
c
category
params['category']
 Article.where(category: category)
params['category'] && Category.find_by_name(params['category'])
c
Category.find_by_name(params['category'])
params['category']
@articles
c
@articles.to_a.reverse
@articles
c
@articles = category ? Article.where(category: category) : Article.all
category = Category.find_by_name(params['category'])
params['category']
c
@advertisement.image = @advertisement.attachments.first.image.url
@advertisement.attachments.first.image.url
@advertisement.attachments.first.image
@advertisement.attachments.first
@advertisement.attachments
@advertisement.image
c
['a'].to_a
@articles.to_a.reverse!
@articles.reverse!
@articles
n
category
n
c
a.reverse
News.all.sort.reverse
a.sort.reverse
a.sort!
a.sort
a = News.last(6)
c
News.all
News.last(6)
c
News.all
News
c
n
c
n
exit
self.save!
self.save！
self.valid?
self.save
self.class
self.errors
self.save!
Paperclip::
self.save
PaperClipp
PaperClip
self.save
self.image
self.content_type
c
Attachment.validates_attachment self.image, content_type: { content_type: ["image/jpg", "image/jpeg", "image/png"] }
Attachment.validates_attachment self.image
validates_attachment self.image
self.image
self.valid?
paper_clip
Attachment.create({attachable_type: "News", attachable_id: 6, image_file_name: "online-shopping2.jpg", image_content_type: "image/jpeg", image_file_size: 50493, image_updated_at: "2016-02-19 08:10:35", created_at: "2016-02-19 08:10:35", updated_at: "2016-02-19 08:10:35"})
Attachment.create
Attachment.new
self.save!
self
self.errors
a = Attachment.new({self.inspect})
a = Attachment.new(self.inspect)
self.inspect
self
a = Attachment.new(self)
Attachment
self
self.save!
self.save
self.valid?
self
this
c
